[![view on npm](http://img.shields.io/npm/v/example.svg)](https://www.npmjs.org/package/example)
# t-matrix

# Aims
- a small library with no dependencies
- based on linear double (float64) arrays for precision and speed
- use row and column offset arrays so common operations, such as transpose or row/column swaps, are 'free' (no copying of data required)
- an ES6 module - only use the methods you need.  If building with a tree-shaking bundler (e.g. rollup) then you only include what you use.
- provide what you need for most linear algebra work
- matrix construction (zeros, ones, eye, rand, diagonal, from arrays)
- operations (add, multiple, map elements)
- submatrices and transpose without copying data
- a good balance between speed and ease of use (if you need super-fast operations on large matrices you may want to look elsewhere).
- LU decomposition-based operations - inv, div, ldiv, det, solve
- provide simple means of extension

# Status
Nearing a V1 release.  Some changes from the initial version are breaking as all of the code has been rewritten.
## Roadmap
The current plan for future versions. Obviously the version numbers further out are more speculative.
- v1.0
  - Breaking from v0.x.x
    - `Matrix.from` behaves differently
    - Methods built on the base class reduced to a minimum (only include what you need)
    - All arithmetic operations separately importable.
    - A `mixin` function can be used to add methods to the class prototype.
  - Constructors: zeros, ones, eye, rand, diag
  - Core methods: get, set, t (transpose), map, clone, size
  - expressive get and set methods (Matlab/Octave-like range selection and manipulation)
  - Manipulations: reshape, diag, swapRows, swapCols, minor, repmat
  - Matrix operations: mult (matrix), div, ldiv, det, inv, trace
  - Element-wise operations (within and between matrices): product, sum, max, min
  - minimal data copying
  - dense matrices and vectors.
  - iterables: for val of matrix, for row of rows(matrix) etc.
  - composable: mixin functions to the Matrix prototype to customise your preferred usage.
- v1.1
  - logical matrices
  - logical matrix addressing
  - logical operations (gt, gte, lt, lte, eq, neq, not)
  - kron, shift
  - norm, dot, cross
- v1.2
  - conv, grad, trapz, cumsum
- v1.3
  - LU and QR decomposition
- after v1.3
  - eigen, SVD
  - fft and supporting methods
  - sort, unique
# example usage

```
import * as Matrix from 't-matrix';

//create a 4x4 square matrix
const m=Matrix.from([[1,2,3,4],[2,3,4,1],[3,4,1,2],[4,1,2,3]]);

//and a target vector (column matrix)
const v=Matrix.vect([2,-2,2,-2])

//then solve v = M * a by rearranging to M \ v = a
const a=Matrix.ldiv(m,v);

//the answer should be [-1,1,-1,1];
console.log([...a]);
```

# tutorial

## Creating matrices

## Operations on matrices

# API
{{>global-index-dl kind="function" category="creation" title="Matrix Creation" prefix="Matrix." ~}}
{{>global-index-dl kind="function" category="manipulation" title="Matrix Manipulation" prefix="Matrix." ~}}
{{>global-index-dl kind="function" category="operation" title="Matrix Operations" prefix="Matrix." ~}}
{{>global-index-dl kind="function" title="Functions" prefix="Matrix." ~}}
{{>global-index-dl kind="class" title="Classes" ~}}
{{>global-index-dl kind="typedef" title="Typedefs" ~}}
{{#orphans~}}
  <a name="{{{anchorName}}}"></a>

  {{>heading-indent~}}
  {{#if (equal name "Matrix")}}{{else}}{{#if (equal name "Range")}}{{else}}Matrix.{{/if~}}{{/if~}}
  {{>sig-name}}

  {{>body}}
  {{>member-index~}}
  {{>separator~}}
  {{#children inherited=undefined ~}}
    {{>docs~}}
  {{/children~}}
{{/orphans~}}

* * *

&copy; 2019 Euan Smith